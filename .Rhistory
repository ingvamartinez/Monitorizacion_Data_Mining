data <- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
str_split_fixed(data$Request_Solicitud," ",3)
library(dplyr)
library(tidyr)
library(stringr)
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
str_split_fixed(data$Request_Solicitud," ",3)
data$Request_Solicitud %>% str_split_fixed(x," ",3)
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
data$Request_Solicitud %>% str_split_fixed(x," ",3)
library(dplyr)
library(tidyr)
library(stringr)
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- merge(x=data,y=data_sol)
datafull<- cbind.data.frame(data,data_sol)
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors$error <- ip_errors[ip_errors$Status != 200]<-"1"
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ip_errors[ip_errors$Status != 200]<-"1"
ip_errors$error <- ifelse(ip_errors$Status != 200],1,0)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_error<-ip_errors[ip_errors&error == 1]
ip_error<-ip_errors[ip_errors&error == 1]
ip_error<-as.data.frame(ip_errors[ip_errors&error == 1])
ip_errors<-as.data.frame(subset(ip_errors,error == 1)
ip_errors<-as.data.frame(subset(ip_errors,error == 1)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
ip_errors<-group_by(ip_errors,Request.IP)
View(ip_errors)
ip_errors<-group_by(ip_errors,Request.IP)
group_ip_error<-as.data.frame(group_by(ip_errors,Request.IP))
group_ip_error<-as.data.frame(group_by(ip_errors,Request.IP,select(Request.IP)))
group_ip_error<-as.data.frame(group_by(ip_errors,Request.IP,select(Request.IP)))+summarise(sum = sum(error), n = n())
group_ip_error<-group_by(ip_errors,Request.IP,select(Request.IP))+summarise(sum = sum(error), n = n())
group_ip_error<-group_by(ip_errors,Request.IP)+summarise(sum = sum(error), n = n())
group_ip_error<-group_by(ip_errors,Request.IP)+summarise(sum = sum(ip_error$error), n = n())
group_ip_error<-group_by(ip_errors,Request.IP)+summarise(sum = sum(ip_errors$error), n = n())
ip_errors<-as.data.frame(subset(ip_errors,error == '1'))
group_ip_error<-group_by(ip_errors,Request.IP)+summarise(sum = sum(ip_errors$error), n = n())
group_ip_error<-group_by(ip_errors,Request.IP)+summarise(n = n())
group_ip_error<-group_by(ip_errors,Request.IP)+summarise()
sum = sum(ip_errors$error),
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
group_ip_error<-group_by(ip_errors,Request.IP)+summarise(sum = sum(ip_errors$error), n = n())
g<- ip_errors %>%  group_by(Request.IP) %>%
+   summarise(sum = sum(amount), n = n())
g<- ip_errors %>%  group_by(Request.IP) %>%
+   summarise(sum = sum(error), n = n())
g<- ip_errors %>%  group_by(Request.IP) %>%
+   summarise(sum = sum(error), n = n())
g<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error), n = n())
View(g)
Ip_noerror <-left_join(ip_errors,g_ip_error)
g_ip_error<- as.data.frame(ip_errors %>%  group_by(Request.IP) %>% + summarise(sum = sum(error), n = n()))
g_ip_error<- as.data.frame(ip_errors %>%  group_by(Request.IP) %>% + summarise(sum = sum(error)))
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_ip_error<- ip_errors %>%  group_by(Request.IP) %>% + summarise(sum = sum(error))
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_ip_error<- ip_errors %>%  group_by(Request.IP) %>% + summarise(sum = sum(error))
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_ip_error<- ip_errors %>%  group_by(Request.IP) %>% + summarise(sum = sum(error))
g_<- ip_errors %>%  group_by(Request.IP) %>% + summarise(sum = sum(error))
g_<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
Ip_noerror <-left_join(ip_errors,g_ip_error)
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
Ip_noerror <-left_join(ip_errors,g_error)
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
Ip_noerror <-left_join(ip_errors,g_errors)
Ip_noerror <-right_join(ip_errors,g_errors)
Ip_noerror <-right_join(ip_errors$Request.IP,g_errors$Request.IP)
Ip_total<- unique(datafull$Request.IP)
Ip_total<- lenght(unique(datafull$Request.IP))
Ip_total<- length(unique(datafull$Request.IP))
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(count() = sum(error))
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print('Usuarios Totaes=', Ip_noerror)
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print('Usuarios Totaes=', Ip_noerror)
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print('Usuarios Totaes=', IP_noerror)
print('Usuarios con errores=', IP_error)
print(IP_noerror)
print('Usuarios Totaes=')
print(IP_noerror)
print(Usuarios Totaes=)
print('Usuarios Totaes=')
?print
print(paste('Usuarios Totales=',IP_noerror))
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print(paste('Usuarios Totales=',IP_noerror))
print(paste('Usuarios sin errores=', IP_noerror))
print(paste('Usuarios con errores=', IP_error))
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print(paste('Usuarios Totales=',IP_total))
print(paste('Usuarios sin errores=', IP_noerror))
print(paste('Usuarios con errores=', IP_error))
setwd("~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/Monitorizacion_Data_Mining")
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print(paste('Usuarios Totales=',IP_total))
print(paste('Usuarios sin errores=', IP_noerror))
print(paste('Usuarios con errores=', IP_error))
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print(paste('Usuarios Totales=',IP_total))
print(paste('Usuarios sin errores=', IP_noerror))
print(paste('Usuarios con errores=', IP_error))
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
# Realizamos las conversiones necesarias para tener las variables con el tipo de dato deseado
#Pregunta 2
print('Numero de Ips sin errores')
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print(paste('Usuarios Totales=',IP_total))
print(paste('Usuarios sin errores=', IP_noerror))
print(paste('Usuarios con errores=', IP_error))
frec_Prot_http<- table(datafull$RequestType)
frec_Prot_http<- data.frame(table(datafull$RequestType))
View(frec_Prot_http)
tipo_imagen<- datafull %>% grepl(pattern = ".*[png|jpg|gif|ico]$", x = Requesturl)
tipo_imagen<- datafull %>% grepl(pattern = ".*[png|jpg|gif|ico]$", x = RequestUrl)
tipo_imagen<- datafull %>% grepl(pattern = ".*[png|jpg|gif|ico]$", datafull$RequestUrl)
tipo_imagen<- grepl(pattern = ".*[png|jpg|gif|ico]$", datafull$RequestUrl)
tipo_imagen<- as.data.frame(tipo_imagen)
View(tipo_imagen)
View(tipo_imagen)
View(tipo_imagen)
datafull2<-cbind.data.frame(datafull,tipo_imagen)
View(datafull2)
table_df2<- data.frame(table(datafull,select(RequestType,tipo_imagen)))
table_df2<- datafull[(RequestType,tipo_imagen)
table_df2<- datafull[c(RequestType,tipo_imagen)]
table_df2<- datafull2[c(RequestType,tipo_imagen)]
View(frec_Prot_http)
View(datafull)
View(datafull2)
View(tipo_imagen)
table_df2<- datafull2[c(RequestType,tipo_imagen)]
table_df2<- datafull2[,c(RequestType,tipo_imagen)]
View(datafull2)
View(datafull2)
table_df2<- datafull2 %>% select(RequestType,tipo_imagen)
table_df2<- table(table_df2)
table_df2<- as.data.frame(table(table_df2))
View(table_df2)
table_df2<- as.data.frame(subset(datafull2,tipo_imagen == TRUE))
tipo_imagen<- grepl(pattern = ".*[png|jpg|gif|ico]$", datafull$RequestUrl)
tipo_imagen<- as.data.frame(tipo_imagen)
datafull2<-cbind.data.frame(datafull,tipo_imagen)
table_df2<- datafull2 %>% select(RequestType,tipo_imagen)
table_df2<- as.data.frame(subset(table_df2,tipo_imagen == TRUE))
table_df2<- data.frame(table(table_df2$RequestType))
View(table_df2)
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
#Pregunta 2
print('Numero de Ips sin errores')
#Seleccionamos las variables que necesitamos
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
#Agregamos una columna para clasificar si tiene error
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
#Realizamos la suma aritmetica para obtener la cantidad de los usuarios con errores y sin errores
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print(paste('Usuarios Totales=',IP_total))
print(paste('Usuarios sin errores=', IP_noerror))
print(paste('Usuarios con errores=', IP_error))
#Pregunta 3
#Analizar los distintos tipos de peticiones HTTP (GET, POST, PUT, DELETE)
#gestionadas por el servidor, identificando la frecuencia de cada una de estas.
frec_Prot_http<- data.frame(table(datafull$RequestType))
#Repetir el análisis, esta vez filtrando previamente aquellas peticiones
#correspondientes a recursos ofrecidos de tipo imagen.
tipo_imagen<- grepl(pattern = ".*[png|jpg|gif|ico]$", datafull$RequestUrl)
tipo_imagen<- as.data.frame(tipo_imagen)
datafull2<-cbind.data.frame(datafull,tipo_imagen)
table_df2<- datafull2 %>% select(RequestType,tipo_imagen)
table_df2<- as.data.frame(subset(table_df2,tipo_imagen == TRUE))
frec_prot_img<- data.frame(table(table_df2$RequestType))
library(dplyr)
library(tidyr)
library(stringr)
# Obtenemos la Data
data_path <-"~/Monitorizacion_y_Data_Mining-VIU/Actividades/Actividad_3/epa-http (1)/epa-http.csv"
data<-read.csv(data_path, col.names = c('Request IP','Request_DATE', 'Request_Solicitud', 'Status', 'Size') , sep=" ", header = FALSE)
# Relizamos la siguientes operaciones para obtener un DF con todos los datos
data_sol<-as.data.frame(data$V3)
data_sol <- str_split_fixed(data$Request_Solicitud," ",3)
data_sol <- as.data.frame(data_sol)
data_sol<- rename(data_sol,c(RequestType = V1, RequestUrl = V2, RequestProtocol = V3))
datafull<- cbind.data.frame(data,data_sol)
#Pregunta 2
print('Numero de Ips sin errores')
#Seleccionamos las variables que necesitamos
ip_errors<- subset(datafull, select=c(Request.IP,Status))
ip_errors<- as.data.frame(ip_errors)
#Agregamos una columna para clasificar si tiene error
ip_errors$error <- ifelse(ip_errors$Status != 200,1,0)
ip_errors<-as.data.frame(subset(ip_errors,error == 1))
g_errors<- ip_errors %>%  group_by(Request.IP) %>%
summarise(sum = sum(error))
#Realizamos la suma aritmetica para obtener la cantidad de los usuarios con errores y sin errores
IP_error<- length(unique(g_errors$Request.IP))
IP_total<- length(unique(datafull$Request.IP))
IP_noerror <- IP_total-IP_error
print(paste('Usuarios Totales=',IP_total))
print(paste('Usuarios sin errores=', IP_noerror))
print(paste('Usuarios con errores=', IP_error))
#Pregunta 3
#Analizar los distintos tipos de peticiones HTTP (GET, POST, PUT, DELETE)
#gestionadas por el servidor, identificando la frecuencia de cada una de estas.
frec_Prot_http<- data.frame(table(datafull$RequestType))
#Repetir el análisis, esta vez filtrando previamente aquellas peticiones
#correspondientes a recursos ofrecidos de tipo imagen.
tipo_imagen<- grepl(pattern = ".*[png|jpg|gif|ico]$", datafull$RequestUrl)
tipo_imagen<- as.data.frame(tipo_imagen)
datafull2<-cbind.data.frame(datafull,tipo_imagen)
table_df2<- datafull2 %>% select(RequestType,tipo_imagen)
table_df2<- as.data.frame(subset(table_df2,tipo_imagen == TRUE))
frec_prot_img<- data.frame(table(table_df2$RequestType))
